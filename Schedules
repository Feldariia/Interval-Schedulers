#Name: Shannon Mong
#Summary: Intro to Standard Interval/Weighted Interval schedule algorithm
#Date: 12 Sept 2021
#Version: 1.0
#Class: SCS341
#Time complexity: O(nlogn)

#Importing
import fileinput
import bisect
import time
from datetime import datetime


#Grab resource allocate input
input = str(print("How many resources would you like to allocate? "))
resource = input
print("You have chosen: ", resource)
#Start
print("Now compiling Standard and Weighted Interval Schedule")
print("Generating Results, one moment.")

#Standard Interval Scheduler
class StandardIntervalScheduling(object):
    start_script = time.time()

#Create index
    list = []

    # Open Standard.txt and append to list
    with open('Standard.txt') as filehandler:
        for line in filehandler:
            list.append(line)

    #End/Start Script
    end_script = time.time()
    print("Total Execution Time: " + str(end_script - start_script))
    print("Starting Standard Interval Scheduler")

#Start interval index and append to list
def standard_interval(start, finish):
    index = list(range(len(start)))
    execution_time = str(end_script - start_script)

#Set time index
    max_set = set()
    prev_event_time = 0
    for i in index:
        if start[i] >= prev_event_time:
            max_set.add(i)
            prev_event_time = finish[i]

#Return set
    return max_set
with open('Standard.txt' , 'a') as f:
    f.write(execution_time)


#Weighted Interval Schedule
class WeightedIntervalScheduling(object):
    print("Starting Weighted Interval Scheduler")
start_script = time.time()


#Open Weighted.txt and append to list
with open('Weighted.txt') as filehandler:
    for line in filehandler:
        list.append(line)

    end_script = time.time()
print("Total Execution Time: " + str(end_script - start_script))

#Weighted Interval class
class WeightedInterval:

    #Define the prior interval, create an index
    def prior_interval(self):
        start = [task[0] for task in self.index]
        finish = [task[1] for task in self.index]
        p = []
        for index in range(len(self.index)):
            # finds idx for which to input start[i] in finish times to still be sorted
            sort = bisect.bisect(finish, start[index]) - 1
            p.append(sort)

        return p
    def interval_weight(object):
        def __init__(self, index):
            self.index = sorted(index, key=lambda tup: tup[1])  # (key = lambda tup : tup[1])
            self.OPT = []
            self.result = []

def result(self, j):
        if j == -1:
            return

        else:
            if (self.index[j][2] + self.compute_opt(self.p[j])) > self.compute_opt(j - 1):
                self.result.append(self.index[j])
                self.result(self.p[j])

            else:
                self.result(j - 1)

    def opt_find(self, j):
        if j == -1:
            return 0

        elif (0 <= j) and (j < len(self.OPT)):
            return self.OPT[j]

        else:
            return max(
            self.index[j][2] + self.opt_find(self.p[j]), self.opt_find(j - 1))

    def weighted_interval(self):
        if len(self.index) == 0:
            return 0, self.result

        self.p = self.prior_interval()

        for j in range(len(self.index)):
            opt_j = self.compute_opt(j)
            self.OPT.append(opt_j)

        self.result(len(self.index) - 1)

        return self.OPT[-1], self.result[::-1]
